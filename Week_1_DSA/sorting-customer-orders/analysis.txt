Bubble Sort:
    A simple comparison-based sorting algorithm where each pair of adjacent elements is compared and swapped if they are in the wrong order. This process is repeated until the array is sorted.

    Time Complexity:
        Best Case: O(n) (when the array is already sorted)
        Average Case: O(n²)
        Worst Case: O(n²)
    Space Complexity: O(1) (in-place sorting)

Insertion Sort:
    Builds the final sorted array one element at a time. It picks each element and places it in its correct position in the already sorted part of the array.

    Time Complexity:
        Best Case: O(n) (when the array is already sorted)
        Average Case: O(n²)
        Worst Case: O(n²)
    Space Complexity: O(1) (in-place sorting)

Quick Sort:
    A divide-and-conquer algorithm. It selects a 'pivot' element and partitions the array into two halves such that elements less than the pivot are on the left, and elements greater than the pivot are on the right. It then recursively sorts the two halves.

    Time Complexity:
        Best Case: O(n log n)
        Average Case: O(n log n)
        Worst Case: O(n²) (when the pivot selection is poor, e.g., always picking the smallest or largest element)
    Space Complexity: O(log n) (due to recursion stack)

Merge Sort:
    A divide-and-conquer algorithm. It divides the array into two halves, recursively sorts them, and then merges the two sorted halves.

    Time Complexity:
        Best Case: O(n log n)
        Average Case: O(n log n)
        Worst Case: O(n log n)
    Space Complexity: O(n) (requires additional space for merging)
    

Why Quick Sort is Generally Preferred Over Bubble Sort
    Efficiency: Quick Sort has an average and best-case time complexity of O(n log n), which is significantly better than Bubble Sort's O(n²). This makes Quick Sort much faster for large datasets.

    Scalability: Quick Sort scales well with large input sizes due to its logarithmic divide-and-conquer approach. Bubble Sort's quadratic time complexity makes it impractical for large datasets.

    Performance in Practice: Despite its worst-case time complexity of O(n²), Quick Sort is often optimized with good pivot selection strategies (like using the median of three) and performs exceedingly well in practice.

    Memory Usage: Both Quick Sort and Bubble Sort have low memory overhead, but Quick Sort's recursive nature requires O(log n) additional space compared to Bubble Sort's O(1). However, the trade-off is worth it for the performance gain in Quick Sort.